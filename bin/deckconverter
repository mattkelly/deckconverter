#!/usr/bin/env python
import sys
import argparse
from deckconverter.deck import Deck
from deckconverter.card import Card
from deckconverter.converter import Converter

def parse_args():
    desc = 'A utility for converting between Magic: The Gathering deck formats'

    parser = argparse.ArgumentParser(description=desc, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('source_file', action='store', help='The original file')
    parser.add_argument('destination_file', action='store', help='The file that will be created')

    args = parser.parse_args()
    return args

def overwrite_prompt(filename):
    invalid = True
    while invalid:
        sys.stdout.write(filename + " exists!. Do you want to overwrite it? [y/n] ")
        choice = raw_input().lower()[:1]
        if choice == "y" or choice == "n":
            invalid = False
        
    return choice == "y"

def convert_deck(source_file, destination_file):
    source_ext = get_file_extension(source_file)
    destination_ext = get_file_extension(destination_file)
    validate_extensions(source_ext, destination_ext)
    converter = Converter()
    return converter.convert(source_file, destination_file)

def validate_extensions(source_ext, destination_ext):
    valid_extensions = ["cod", "coll", "csv", "dec", "txt", "mwdeck"]
    if source_ext not in valid_extensions:
        exit("'" + source_ext + "' is not a valid extension!", 1)
    if destination_ext not in valid_extensions:
        exit("'" + destination_ext + "' is not a valid extension!", 1)

def get_file_extension(filename):
    return filename.split(".")[-1]

def validate_source_file(filename):
    try:
        with open(filename):
            pass
    except IOError:
        exit(filename + " does not exist! Exiting ...", 1)

def validate_destination_file(filename):
    try:
        with open(filename):
            overwrite = overwrite_prompt(filename)
            if overwrite:
                pass
            else:
                exit(args.destination_file + " will not be overwritten! Exiting ...", 1)
    except IOError:
        pass

def exit(message, code):
    if code == 0:
        print message
    else:
        sys.stderr.write(message)

    sys.exit(code)

if __name__ == "__main__":
    args = parse_args()
    validate_source_file(args.source_file)
    validate_destination_file(args.destination_file)
    converted = convert_deck(args.source_file, args.destination_file)

    if converted:
        exit("Successfully converted " + args.source_file + " to " + args.destination_file + "!", 0)
    else:
        exit("Failed to convert " + args.source_file + " to " + args.destination_file + "!", 1)
